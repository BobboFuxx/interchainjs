"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "../cosmos/src/signer.ts":
/*!*******************************!*\
  !*** ../cosmos/src/signer.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Signer\": function() { return /* binding */ Signer; }\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"../../node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _sign_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sign/core */ \"../core/index.ts\");\n/* harmony import */ var _config_prefix_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config/prefix.json */ \"../cosmos/src/config/prefix.json\");\n/* harmony import */ var _const_pubkey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./const/pubkey */ \"../cosmos/src/const/pubkey.ts\");\n/* harmony import */ var _const_tx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./const/tx */ \"../cosmos/src/const/tx.ts\");\n/* harmony import */ var _interchain_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./interchain/types */ \"../cosmos/src/interchain/types.ts\");\n/* harmony import */ var _parsers_msg__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parsers/msg */ \"../cosmos/src/parsers/msg.ts\");\n/* harmony import */ var _query_parser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./query.parser */ \"../cosmos/src/query.parser.ts\");\n/* harmony import */ var _utils_bech__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/bech */ \"../cosmos/src/utils/bech.ts\");\n/* harmony import */ var _utils_fee__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/fee */ \"../cosmos/src/utils/fee.ts\");\n/* harmony import */ var _utils_json__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/json */ \"../cosmos/src/utils/json.ts\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return { value: void 0, done: !0 }; } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable || \"\" === iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } throw new TypeError(_typeof(iterable) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n\n\n\n\n\n\n\n\n\nvar Signer = /*#__PURE__*/function (_BaseSigner, _fetchSignerData2, _toOfflineTx2, _estimateFee, _broadcast3, _broadcastArbitrary) {\n  _inherits(Signer, _BaseSigner);\n  var _super = _createSuper(Signer);\n  function Signer() {\n    var _this;\n    _classCallCheck(this, Signer);\n    _this = _super.call(this, _query_parser__WEBPACK_IMPORTED_MODULE_7__.QueryParser);\n    _defineProperty(_assertThisInitialized(_this), \"_pool\", {});\n    for (var _len = arguments.length, data = new Array(_len), _key = 0; _key < _len; _key++) {\n      data[_key] = arguments[_key];\n    }\n    var parsers = data.map(function (d) {\n      return _parsers_msg__WEBPACK_IMPORTED_MODULE_6__.MsgParser.fromMeta(d);\n    });\n    _this.addParsers(parsers);\n    return _this;\n  }\n  _createClass(Signer, [{\n    key: \"addParsers\",\n    value: function addParsers(parsers) {\n      this._pool = _objectSpread(_objectSpread({}, this._pool), Object.fromEntries(parsers.map(function (parser) {\n        return [parser.protoType, parser];\n      })));\n    }\n  }, {\n    key: \"supportedMsgTypes\",\n    get: function get() {\n      return Array.from(Object.keys(this._pool));\n    }\n  }, {\n    key: \"parsers\",\n    get: function get() {\n      return Array.from(Object.values(this._pool));\n    }\n  }, {\n    key: \"_getParserFromProto\",\n    value: function _getParserFromProto(protoType) {\n      var parser = this._pool[protoType];\n      if (!parser) {\n        throw new Error(\"Please add the parser with typeUrl: \".concat(protoType, \" in the pool (using `addParsers` method).\"));\n      }\n      return parser;\n    }\n  }, {\n    key: \"_getParserFromAmino\",\n    value: function _getParserFromAmino(aminoType) {\n      var parser = this._pool[aminoType];\n      if (!parser) {\n        throw new Error(\"Please add the parser with type: \".concat(aminoType, \" in the pool (using `addParsers` method).\"));\n      }\n      return parser;\n    }\n  }, {\n    key: \"_hash\",\n    value: function _hash(msg) {\n      return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256)(msg);\n    }\n  }, {\n    key: \"_toSignature\",\n    value: function _toSignature(sigObj) {\n      return new Uint8Array([].concat(_toConsumableArray(sigObj.r), _toConsumableArray(sigObj.s)));\n    }\n  }, {\n    key: \"_toSigObj\",\n    value: function _toSigObj(signature) {\n      return {\n        r: signature.slice(0, 32),\n        s: signature.slice(32, 64),\n        recoveryId: null\n      };\n    }\n  }, {\n    key: \"_fetchSignerData\",\n    value: function _fetchSignerData(_x) {\n      return (_fetchSignerData2 = _fetchSignerData2 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {\n        var _data$chainId, chainId, prefix, _yield$this$query$get, _yield$this$query$get2, sequence, accountNumber, _sequence, _accountNumber;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _data$chainId = data.chainId;\n              if (!(_data$chainId === void 0)) {\n                _context.next = 7;\n                break;\n              }\n              _context.next = 4;\n              return this.query.getChainId();\n            case 4:\n              _context.t0 = _context.sent;\n              _context.next = 8;\n              break;\n            case 7:\n              _context.t0 = _data$chainId;\n            case 8:\n              chainId = _context.t0;\n              if (!(typeof data.sequence === \"undefined\" || typeof data.accountNumber === \"undefined\")) {\n                _context.next = 22;\n                break;\n              }\n              prefix = _config_prefix_json__WEBPACK_IMPORTED_MODULE_2__[chainId];\n              if (prefix) {\n                _context.next = 13;\n                break;\n              }\n              throw new Error(\"Cannot find bech32_prefix for chain \".concat(chainId, \".\"));\n            case 13:\n              _context.next = 15;\n              return this.query.getBaseAccount((0,_utils_bech__WEBPACK_IMPORTED_MODULE_8__.toBech32)(prefix, this.auth.key.address));\n            case 15:\n              _yield$this$query$get = _context.sent;\n              _yield$this$query$get2 = _yield$this$query$get.account;\n              sequence = _yield$this$query$get2.sequence;\n              accountNumber = _yield$this$query$get2.accountNumber;\n              return _context.abrupt(\"return\", {\n                chainId: chainId,\n                sequence: sequence,\n                accountNumber: accountNumber\n              });\n            case 22:\n              _sequence = data.sequence, _accountNumber = data.accountNumber;\n              return _context.abrupt(\"return\", {\n                chainId: chainId,\n                sequence: _sequence,\n                accountNumber: _accountNumber\n              });\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"_createAuthInfo\",\n    value: function _createAuthInfo(_ref) {\n      var pubkey = _ref.pubkey,\n        sequence = _ref.sequence,\n        fee = _ref.fee;\n      var signers = [{\n        publicKey: _const_pubkey__WEBPACK_IMPORTED_MODULE_3__.PubKeySecp256k1Parser.fromProto({\n          key: pubkey\n        }).wrap().encode().pop(),\n        modeInfo: {\n          single: {\n            mode: _interchain_types__WEBPACK_IMPORTED_MODULE_5__.SignMode.SIGN_MODE_LEGACY_AMINO_JSON\n          }\n        },\n        sequence: sequence\n      }];\n      return _const_tx__WEBPACK_IMPORTED_MODULE_4__.AuthInfoParser.createProtoData({\n        signerInfos: signers,\n        fee: fee\n      });\n    }\n  }, {\n    key: \"_createTxRaw\",\n    value: function _createTxRaw(_ref2) {\n      var txBody = _ref2.txBody,\n        authInfo = _ref2.authInfo,\n        signatures = _ref2.signatures;\n      var txBodyBytes = _const_tx__WEBPACK_IMPORTED_MODULE_4__.TxBodyParser.fromProto(txBody).encode().pop();\n      var authInfoBytes = _const_tx__WEBPACK_IMPORTED_MODULE_4__.AuthInfoParser.fromProto(authInfo).encode().pop();\n      return _const_tx__WEBPACK_IMPORTED_MODULE_4__.TxRawParser.fromProto({\n        bodyBytes: txBodyBytes,\n        authInfoBytes: authInfoBytes,\n        signatures: signatures\n      }).pop();\n    }\n  }, {\n    key: \"_toTx\",\n    value: function _toTx(tx) {\n      var _this2 = this;\n      return {\n        msgs: tx.msgs.map(function (msg) {\n          var parser = _this2._getParserFromAmino(msg.type);\n          return {\n            typeUrl: parser.protoType,\n            value: parser.converter.toProto(msg.value)\n          };\n        }),\n        fee: typeof tx.fee !== \"undefined\" ? {\n          amount: tx.fee.amount,\n          gasLimit: BigInt(tx.fee.gas),\n          payer: tx.fee.payer || \"\",\n          granter: tx.fee.granter || \"\"\n        } : void 0,\n        memo: tx.memo,\n        accountNumber: typeof tx.account_number !== \"undefined\" ? BigInt(tx.account_number) : void 0,\n        sequence: typeof tx.sequence !== \"undefined\" ? BigInt(tx.sequence) : void 0,\n        chainId: tx.chain_id\n      };\n    }\n  }, {\n    key: \"_toOfflineAminoTx\",\n    value: function _toOfflineAminoTx(_ref3) {\n      var _this3 = this;\n      var msgs = _ref3.msgs,\n        fee = _ref3.fee,\n        memo = _ref3.memo,\n        accountNumber = _ref3.accountNumber,\n        sequence = _ref3.sequence,\n        chainId = _ref3.chainId;\n      return {\n        msgs: msgs.map(function (msg) {\n          var parser = _this3._getParserFromProto(msg.typeUrl);\n          return parser.fromProto(msg).toAmino().pop();\n        }),\n        fee: (0,_utils_fee__WEBPACK_IMPORTED_MODULE_9__.toAminoFee)(fee),\n        memo: memo,\n        account_number: accountNumber.toString(),\n        sequence: sequence.toString(),\n        chain_id: chainId\n      };\n    }\n  }, {\n    key: \"_toOfflineTx\",\n    value: function _toOfflineTx(_x2) {\n      return (_toOfflineTx2 = _toOfflineTx2 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(data) {\n        var msgs, fee, memo, chainId, sequence, accountNumber, signerData, offlineTx;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              msgs = data.msgs, fee = data.fee, memo = data.memo, chainId = data.chainId, sequence = data.sequence, accountNumber = data.accountNumber;\n              _context2.next = 3;\n              return this._fetchSignerData({\n                chainId: chainId,\n                sequence: sequence,\n                accountNumber: accountNumber\n              });\n            case 3:\n              signerData = _context2.sent;\n              _context2.t0 = msgs;\n              _context2.t1 = fee;\n              if (_context2.t1) {\n                _context2.next = 10;\n                break;\n              }\n              _context2.next = 9;\n              return this.estimateFee(_objectSpread(_objectSpread({}, data), signerData));\n            case 9:\n              _context2.t1 = _context2.sent;\n            case 10:\n              _context2.t2 = _context2.t1;\n              _context2.t3 = memo || \"\";\n              _context2.t4 = signerData.chainId;\n              _context2.t5 = signerData.sequence;\n              _context2.t6 = signerData.accountNumber;\n              offlineTx = {\n                msgs: _context2.t0,\n                fee: _context2.t2,\n                memo: _context2.t3,\n                chainId: _context2.t4,\n                sequence: _context2.t5,\n                accountNumber: _context2.t6\n              };\n              return _context2.abrupt(\"return\", offlineTx);\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     *\n     * @param txData txData that don't need to request more info from web server\n     * @returns TxRaw\n     */\n  }, {\n    key: \"_signOffline\",\n    value: function _signOffline(txData) {\n      var _this4 = this;\n      var msgs = txData.msgs,\n        fee = txData.fee,\n        memo = txData.memo,\n        sequence = txData.sequence;\n      var txBody = _const_tx__WEBPACK_IMPORTED_MODULE_4__.TxBodyParser.createProtoData({\n        messages: msgs.map(function (msg) {\n          return _this4._getParserFromProto(msg.typeUrl).fromProto(msg).encode().pop();\n        }),\n        memo: memo\n      });\n      var authInfo = this._createAuthInfo({\n        pubkey: this.auth.key.pubkey,\n        sequence: sequence,\n        fee: fee\n      });\n      var signature = this._signArbitrary((0,_utils_json__WEBPACK_IMPORTED_MODULE_10__.toBytes)(this._toOfflineAminoTx(txData)));\n      return this._createTxRaw({\n        txBody: txBody,\n        authInfo: authInfo,\n        signatures: [signature]\n      });\n    }\n  }, {\n    key: \"estimateFee\",\n    value: function estimateFee(_x3, _x4) {\n      return (_estimateFee = _estimateFee || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(data, gasPrice) {\n        var _this5 = this;\n        var multiplier,\n          msgs,\n          memo,\n          chainId,\n          sequence,\n          accountNumber,\n          signerData,\n          txBytes,\n          gasInfo,\n          fee,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              multiplier = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : 1.3;\n              msgs = data.msgs, memo = data.memo, chainId = data.chainId, sequence = data.sequence, accountNumber = data.accountNumber;\n              _context3.next = 4;\n              return this._fetchSignerData({\n                chainId: chainId,\n                sequence: sequence,\n                accountNumber: accountNumber\n              });\n            case 4:\n              signerData = _context3.sent;\n              txBytes = _const_tx__WEBPACK_IMPORTED_MODULE_4__.TxParser.fromProto({\n                body: _const_tx__WEBPACK_IMPORTED_MODULE_4__.TxBodyParser.createProtoData({\n                  messages: msgs.map(function (msg) {\n                    return _this5._getParserFromProto(msg.typeUrl).fromProto(msg).wrap().encode().pop();\n                  }),\n                  memo: memo\n                }),\n                authInfo: _const_tx__WEBPACK_IMPORTED_MODULE_4__.AuthInfoParser.createProtoData({\n                  fee: _const_tx__WEBPACK_IMPORTED_MODULE_4__.FeeParser.createProtoData({}),\n                  signerInfos: [{\n                    publicKey: _const_pubkey__WEBPACK_IMPORTED_MODULE_3__.PubKeySecp256k1Parser.fromProto({\n                      key: this.auth.key.pubkey\n                    }).wrap().encode().pop(),\n                    sequence: BigInt(signerData.sequence),\n                    modeInfo: {\n                      single: {\n                        mode: _interchain_types__WEBPACK_IMPORTED_MODULE_5__.SignMode.SIGN_MODE_UNSPECIFIED\n                      }\n                    }\n                  }]\n                }),\n                signatures: [new Uint8Array()]\n              }).encode().pop();\n              _context3.next = 8;\n              return this.query.estimateGas(txBytes);\n            case 8:\n              gasInfo = _context3.sent;\n              fee = (0,_utils_fee__WEBPACK_IMPORTED_MODULE_9__.calculateFee)(_sign_core__WEBPACK_IMPORTED_MODULE_1__.Decimal.fromBigInt(gasInfo.gasUsed).multiply(multiplier).round(), gasPrice || this.getGasPrice(signerData.chainId));\n              return _context3.abrupt(\"return\", fee);\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice(chainId) {\n      return (0,_utils_fee__WEBPACK_IMPORTED_MODULE_9__.getLowGasPrice)(chainId);\n      // return getAvgGasPrice(chainId);\n      // return getHighGasPrice(chainId);\n    }\n  }, {\n    key: \"sign\",\n    value: function sign(tx) {\n      var _this6 = this,\n        _ref4,\n        _broadcast;\n      var getSigned = function getSigned() {\n        return (_ref4 = _ref4 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n          var offlineTx;\n          return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _this6._toOfflineTx(tx);\n              case 2:\n                offlineTx = _context4.sent;\n                return _context4.abrupt(\"return\", _this6._signOffline(offlineTx));\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }, _callee4);\n        }))).apply(this, arguments);\n      };\n      return {\n        signed: getSigned(),\n        broadcast: function broadcast() {\n          return (_broadcast = _broadcast || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n            var checkTx,\n              commitTx,\n              signed,\n              _args5 = arguments;\n            return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n              while (1) switch (_context5.prev = _context5.next) {\n                case 0:\n                  checkTx = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : true;\n                  commitTx = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : false;\n                  _context5.next = 4;\n                  return getSigned();\n                case 4:\n                  signed = _context5.sent;\n                  return _context5.abrupt(\"return\", _this6.broadcast(signed, checkTx, commitTx));\n                case 6:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }, _callee5);\n          }))).apply(this, arguments);\n        }\n      };\n    }\n  }, {\n    key: \"signAmino\",\n    value: function signAmino(tx) {\n      var txData = this._toTx(tx);\n      return this.sign(txData);\n    }\n  }, {\n    key: \"signDirect\",\n    value: function signDirect(tx) {\n      var _this7 = this,\n        _ref5,\n        _broadcast2;\n      var getSigned = function getSigned() {\n        return (_ref5 = _ref5 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n          var bodyBytes, authInfoBytes, chainId, accountNumber, offlineTx, signerData, signature;\n          return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n            while (1) switch (_context6.prev = _context6.next) {\n              case 0:\n                bodyBytes = tx.bodyBytes, authInfoBytes = tx.authInfoBytes, chainId = tx.chainId, accountNumber = tx.accountNumber;\n                if (!(chainId == void 0 || accountNumber == void 0)) {\n                  _context6.next = 8;\n                  break;\n                }\n                _context6.next = 4;\n                return _this7._fetchSignerData({\n                  chainId: chainId,\n                  accountNumber: accountNumber\n                });\n              case 4:\n                signerData = _context6.sent;\n                offlineTx = _objectSpread(_objectSpread({}, tx), {}, {\n                  chainId: signerData.chainId,\n                  accountNumber: signerData.accountNumber\n                });\n                _context6.next = 9;\n                break;\n              case 8:\n                offlineTx = tx;\n              case 9:\n                signature = _this7._signArbitrary(_const_tx__WEBPACK_IMPORTED_MODULE_4__.SignDocParser.fromProto(offlineTx).encode().pop());\n                return _context6.abrupt(\"return\", _const_tx__WEBPACK_IMPORTED_MODULE_4__.TxRawParser.fromProto({\n                  bodyBytes: bodyBytes,\n                  authInfoBytes: authInfoBytes,\n                  signatures: [signature]\n                }).pop());\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }, _callee6);\n        }))).apply(this, arguments);\n      };\n      return {\n        signed: getSigned(),\n        broadcast: function broadcast() {\n          return (_broadcast2 = _broadcast2 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n            var checkTx,\n              commitTx,\n              signed,\n              _args7 = arguments;\n            return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n              while (1) switch (_context7.prev = _context7.next) {\n                case 0:\n                  checkTx = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : true;\n                  commitTx = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : false;\n                  _context7.next = 4;\n                  return getSigned();\n                case 4:\n                  signed = _context7.sent;\n                  return _context7.abrupt(\"return\", _this7.broadcast(signed, checkTx, commitTx));\n                case 6:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }, _callee7);\n          }))).apply(this, arguments);\n        }\n      };\n    }\n  }, {\n    key: \"signArbitrary\",\n    value: function signArbitrary(raw) {\n      var _this8 = this;\n      var signed = this._signArbitrary(raw);\n      return {\n        signed: signed,\n        broadcast: function broadcast() {\n          var checkTx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n          var commitTx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          return _this8.broadcastArbitrary(signed, checkTx, commitTx);\n        }\n      };\n    }\n  }, {\n    key: \"broadcast\",\n    value: function broadcast(_x5) {\n      return (_broadcast3 = _broadcast3 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(txRaw) {\n        var checkTx,\n          commitTx,\n          txBytes,\n          _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              checkTx = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : true;\n              commitTx = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : false;\n              txBytes = _const_tx__WEBPACK_IMPORTED_MODULE_4__.TxRawParser.fromProto(txRaw).encode().pop();\n              return _context8.abrupt(\"return\", this.broadcastArbitrary(txBytes, checkTx, commitTx));\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }))).apply(this, arguments);\n    }\n  }, {\n    key: \"broadcastArbitrary\",\n    value: function broadcastArbitrary(_x6) {\n      return (_broadcastArbitrary = _broadcastArbitrary || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(raw) {\n        var checkTx,\n          commitTx,\n          mode,\n          _yield$this$query$bro,\n          txResponse,\n          _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              checkTx = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : true;\n              commitTx = _args9.length > 2 && _args9[2] !== undefined ? _args9[2] : false;\n              mode = checkTx && commitTx ? _interchain_types__WEBPACK_IMPORTED_MODULE_5__.BroadcastMode.BROADCAST_MODE_BLOCK : checkTx ? _interchain_types__WEBPACK_IMPORTED_MODULE_5__.BroadcastMode.BROADCAST_MODE_SYNC : _interchain_types__WEBPACK_IMPORTED_MODULE_5__.BroadcastMode.BROADCAST_MODE_ASYNC;\n              _context9.next = 5;\n              return this.query.broadcast(raw, mode);\n            case 5:\n              _yield$this$query$bro = _context9.sent;\n              txResponse = _yield$this$query$bro.txResponse;\n              return _context9.abrupt(\"return\", txResponse);\n            case 8:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }))).apply(this, arguments);\n    }\n  }], [{\n    key: \"fromParsers\",\n    value: function fromParsers() {\n      var signer = new Signer();\n      for (var _len2 = arguments.length, parsers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        parsers[_key2] = arguments[_key2];\n      }\n      signer.addParsers(parsers);\n      return signer;\n    }\n  }]);\n  return Signer;\n}(_sign_core__WEBPACK_IMPORTED_MODULE_1__.BaseSigner);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../cosmos/src/signer.ts\n"));

/***/ })

});