"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Page; }\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_src_instanceof_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @swc/helpers/src/_instanceof.mjs */ \"../../node_modules/@swc/helpers/src/_instanceof.mjs\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @chakra-ui/react */ \"../../node_modules/@chakra-ui/react/dist/index.mjs\");\n/* harmony import */ var _sign_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sign/core */ \"../core/index.ts\");\n/* harmony import */ var _sign_cosmos__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sign/cosmos */ \"../cosmos/index.ts\");\n/* harmony import */ var _sign_cosmos_const__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @sign/cosmos-const */ \"../cosmos-const/index.ts\");\n/* harmony import */ var interchain_query_cosmos_bank_v1beta1_query_rpc_Query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! interchain-query/cosmos/bank/v1beta1/query.rpc.Query */ \"../../node_modules/interchain-query/cosmos/bank/v1beta1/query.rpc.Query.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _test_data__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../test-data */ \"../../test-data.ts\");\n/* harmony import */ var _components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components */ \"./components/index.ts\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react/jsx-runtime */ \"../../node_modules/react/jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__);\n\nvar _s = $RefreshSig$();\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function _typeof(obj) {\n        return typeof obj;\n    } : function(obj) {\n        return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n}\nfunction _regeneratorRuntime() {\n    \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ \n    var define = function define(obj, key, value) {\n        return Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: !0,\n            configurable: !0,\n            writable: !0\n        }), obj[key];\n    };\n    var wrap = function wrap(innerFn, outerFn, self, tryLocsList) {\n        var protoGenerator = outerFn && (0,_swc_helpers_src_instanceof_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []);\n        return defineProperty(generator, \"_invoke\", {\n            value: makeInvokeMethod(innerFn, self, context)\n        }), generator;\n    };\n    var tryCatch = function tryCatch(fn, obj, arg) {\n        try {\n            return {\n                type: \"normal\",\n                arg: fn.call(obj, arg)\n            };\n        } catch (err) {\n            return {\n                type: \"throw\",\n                arg: err\n            };\n        }\n    };\n    var Generator = function Generator() {};\n    var GeneratorFunction = function GeneratorFunction() {};\n    var GeneratorFunctionPrototype = function GeneratorFunctionPrototype() {};\n    var defineIteratorMethods = function defineIteratorMethods(prototype) {\n        [\n            \"next\",\n            \"throw\",\n            \"return\"\n        ].forEach(function(method) {\n            define(prototype, method, function(arg) {\n                return this._invoke(method, arg);\n            });\n        });\n    };\n    var AsyncIterator = function AsyncIterator(generator, PromiseImpl) {\n        function invoke(method, arg, resolve, reject) {\n            var record = tryCatch(generator[method], generator, arg);\n            if (\"throw\" !== record.type) {\n                var result = record.arg, value = result.value;\n                return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function(value) {\n                    invoke(\"next\", value, resolve, reject);\n                }, function(err) {\n                    invoke(\"throw\", err, resolve, reject);\n                }) : PromiseImpl.resolve(value).then(function(unwrapped) {\n                    result.value = unwrapped, resolve(result);\n                }, function(error) {\n                    return invoke(\"throw\", error, resolve, reject);\n                });\n            }\n            reject(record.arg);\n        }\n        var previousPromise;\n        defineProperty(this, \"_invoke\", {\n            value: function value(method, arg) {\n                function callInvokeWithMethodAndArg() {\n                    return new PromiseImpl(function(resolve, reject) {\n                        invoke(method, arg, resolve, reject);\n                    });\n                }\n                return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n            }\n        });\n    };\n    var makeInvokeMethod = function makeInvokeMethod(innerFn, self, context) {\n        var state = \"suspendedStart\";\n        return function(method, arg) {\n            if (\"executing\" === state) throw new Error(\"Generator is already running\");\n            if (\"completed\" === state) {\n                if (\"throw\" === method) throw arg;\n                return {\n                    value: void 0,\n                    done: !0\n                };\n            }\n            for(context.method = method, context.arg = arg;;){\n                var delegate = context.delegate;\n                if (delegate) {\n                    var delegateResult = maybeInvokeDelegate(delegate, context);\n                    if (delegateResult) {\n                        if (delegateResult === ContinueSentinel) continue;\n                        return delegateResult;\n                    }\n                }\n                if (\"next\" === context.method) context.sent = context._sent = context.arg;\n                else if (\"throw\" === context.method) {\n                    if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n                    context.dispatchException(context.arg);\n                } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n                state = \"executing\";\n                var record = tryCatch(innerFn, self, context);\n                if (\"normal\" === record.type) {\n                    if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n                    return {\n                        value: record.arg,\n                        done: context.done\n                    };\n                }\n                \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n            }\n        };\n    };\n    var pushTryEntry = function pushTryEntry(locs) {\n        var entry = {\n            tryLoc: locs[0]\n        };\n        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n    };\n    var resetTryEntry = function resetTryEntry(entry) {\n        var record = entry.completion || {};\n        record.type = \"normal\", delete record.arg, entry.completion = record;\n    };\n    var Context = function Context(tryLocsList) {\n        this.tryEntries = [\n            {\n                tryLoc: \"root\"\n            }\n        ], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n    };\n    var values = function values(iterable) {\n        if (iterable || \"\" === iterable) {\n            var iteratorMethod = iterable[iteratorSymbol];\n            if (iteratorMethod) return iteratorMethod.call(iterable);\n            if (\"function\" == typeof iterable.next) return iterable;\n            if (!isNaN(iterable.length)) {\n                var i = -1, next = function next() {\n                    for(; ++i < iterable.length;)if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n                    return next.value = undefined, next.done = !0, next;\n                };\n                return next.next = next;\n            }\n        }\n        throw new TypeError(_typeof(iterable) + \" is not iterable\");\n    };\n    _regeneratorRuntime = function _regeneratorRuntime() {\n        return exports;\n    };\n    var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key, desc) {\n        obj[key] = desc.value;\n    }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n    try {\n        define({}, \"\");\n    } catch (err) {\n        define = function define(obj, key, value) {\n            return obj[key] = value;\n        };\n    }\n    exports.wrap = wrap;\n    var ContinueSentinel = {};\n    var IteratorPrototype = {};\n    define(IteratorPrototype, iteratorSymbol, function() {\n        return this;\n    });\n    var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    function maybeInvokeDelegate(delegate, context) {\n        var methodName = context.method, method = delegate.iterator[methodName];\n        if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n        var record = tryCatch(method, delegate.iterator, context.arg);\n        if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n        var info = record.arg;\n        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n    }\n    return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n        value: GeneratorFunctionPrototype,\n        configurable: !0\n    }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n        value: GeneratorFunction,\n        configurable: !0\n    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function(genFun) {\n        var ctor = \"function\" == typeof genFun && genFun.constructor;\n        return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n    }, exports.mark = function(genFun) {\n        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n    }, exports.awrap = function(arg) {\n        return {\n            __await: arg\n        };\n    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {\n        return this;\n    }), exports.AsyncIterator = AsyncIterator, exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n        void 0 === PromiseImpl && (PromiseImpl = Promise);\n        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n        return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {\n            return result.done ? result.value : iter.next();\n        });\n    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function() {\n        return this;\n    }), define(Gp, \"toString\", function() {\n        return \"[object Generator]\";\n    }), exports.keys = function(val) {\n        var object = Object(val), keys = [];\n        for(var key in object)keys.push(key);\n        return keys.reverse(), function next() {\n            for(; keys.length;){\n                var key = keys.pop();\n                if (key in object) return next.value = key, next.done = !1, next;\n            }\n            return next.done = !0, next;\n        };\n    }, exports.values = values, Context.prototype = {\n        constructor: Context,\n        reset: function reset(skipTempReset) {\n            if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for(var name in this)\"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n        },\n        stop: function stop() {\n            this.done = !0;\n            var rootRecord = this.tryEntries[0].completion;\n            if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n            return this.rval;\n        },\n        dispatchException: function dispatchException(exception) {\n            var handle = function handle(loc, caught) {\n                return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n            };\n            if (this.done) throw exception;\n            var context = this;\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i], record = entry.completion;\n                if (\"root\" === entry.tryLoc) return handle(\"end\");\n                if (entry.tryLoc <= this.prev) {\n                    var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\");\n                    if (hasCatch && hasFinally) {\n                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n                    } else if (hasCatch) {\n                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n                    } else {\n                        if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n                    }\n                }\n            }\n        },\n        abrupt: function abrupt(type, arg) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n                    var finallyEntry = entry;\n                    break;\n                }\n            }\n            finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n            var record = finallyEntry ? finallyEntry.completion : {};\n            return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n        },\n        complete: function complete(record, afterLoc) {\n            if (\"throw\" === record.type) throw record.arg;\n            return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n        },\n        finish: function finish(finallyLoc) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n            }\n        },\n        \"catch\": function _catch(tryLoc) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.tryLoc === tryLoc) {\n                    var record = entry.completion;\n                    if (\"throw\" === record.type) {\n                        var thrown = record.arg;\n                        resetTryEntry(entry);\n                    }\n                    return thrown;\n                }\n            }\n            throw new Error(\"illegal catch attempt\");\n        },\n        delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n            return this.delegate = {\n                iterator: values(iterable),\n                resultName: resultName,\n                nextLoc: nextLoc\n            }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n        }\n    }, exports;\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (null != _i) {\n        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n        try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                if (Object(_i) !== _i) return;\n                _n = !1;\n            } else for(; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n        } catch (err) {\n            _d = !0, _e = err;\n        } finally{\n            try {\n                if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n            } finally{\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\n\n\n\n\n\n\n\n\nvar sendMsgs = [\n    {\n        typeUrl: \"/cosmos.bank.v1beta1.MsgSend\",\n        value: {\n            amount: [\n                {\n                    amount: \"1000\",\n                    denom: \"uatom\"\n                }\n            ],\n            fromAddress: _test_data__WEBPACK_IMPORTED_MODULE_6__.cosmoshubAddress,\n            toAddress: _test_data__WEBPACK_IMPORTED_MODULE_6__.cosmoshubAddress\n        }\n    }\n];\nvar auth = _sign_core__WEBPACK_IMPORTED_MODULE_1__.Secp256k1Auth.fromMnemonic(_test_data__WEBPACK_IMPORTED_MODULE_6__.mnemonic);\n_sign_cosmos_const__WEBPACK_IMPORTED_MODULE_3__.stargateSigner.on(_test_data__WEBPACK_IMPORTED_MODULE_6__.rpcEndpoint).by(auth);\nvar gasPrice = _sign_cosmos_const__WEBPACK_IMPORTED_MODULE_3__.stargateSigner.getGasPrice(\"cosmoshub-4\");\nfunction Page() {\n    _s();\n    var _balance$amount, _balance$denom;\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_5__.useState)(), _useState2 = _slicedToArray(_useState, 2), balance = _useState2[0], setBalance = _useState2[1];\n    var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_5__.useState)(), _useState4 = _slicedToArray(_useState3, 2), fee = _useState4[0], setFee = _useState4[1];\n    var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_5__.useState)(\"--\"), _useState6 = _slicedToArray(_useState5, 2), gas = _useState6[0], setGas = _useState6[1];\n    var _useState7 = (0,react__WEBPACK_IMPORTED_MODULE_5__.useState)(), _useState8 = _slicedToArray(_useState7, 2), receipt = _useState8[0], setReceipt = _useState8[1];\n    var updateAmount = (0,react__WEBPACK_IMPORTED_MODULE_5__.useCallback)(/*#__PURE__*/ _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee() {\n        var query, resp;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while(1)switch(_context.prev = _context.next){\n                case 0:\n                    query = new _sign_cosmos__WEBPACK_IMPORTED_MODULE_2__.Query(_test_data__WEBPACK_IMPORTED_MODULE_6__.rpcEndpoint);\n                    _context.next = 3;\n                    return query.about(interchain_query_cosmos_bank_v1beta1_query_rpc_Query__WEBPACK_IMPORTED_MODULE_4__.QueryClientImpl).balance({\n                        address: _test_data__WEBPACK_IMPORTED_MODULE_6__.cosmoshubAddress,\n                        denom: \"uatom\"\n                    });\n                case 3:\n                    resp = _context.sent;\n                    setBalance(resp.balance);\n                case 5:\n                case \"end\":\n                    return _context.stop();\n            }\n        }, _callee);\n    })), []);\n    var updateFee = (0,react__WEBPACK_IMPORTED_MODULE_5__.useCallback)(/*#__PURE__*/ _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee2() {\n        var resp;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while(1)switch(_context2.prev = _context2.next){\n                case 0:\n                    _context2.next = 2;\n                    return _sign_cosmos_const__WEBPACK_IMPORTED_MODULE_3__.stargateSigner.estimateFee({\n                        msgs: sendMsgs\n                    });\n                case 2:\n                    resp = _context2.sent;\n                    setFee(resp.amount[0]);\n                    setGas(resp.gasLimit.toString());\n                case 5:\n                case \"end\":\n                    return _context2.stop();\n            }\n        }, _callee2);\n    })), []);\n    (0,react__WEBPACK_IMPORTED_MODULE_5__.useEffect)(function() {\n        updateAmount();\n    }, []);\n    var onClick = (0,react__WEBPACK_IMPORTED_MODULE_5__.useCallback)(function() {\n        onOpen();\n        updateFee();\n    }, []);\n    var onClickSignAndBroadcast = (0,react__WEBPACK_IMPORTED_MODULE_5__.useCallback)(/*#__PURE__*/ _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee3() {\n        var resp;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while(1)switch(_context3.prev = _context3.next){\n                case 0:\n                    _context3.next = 2;\n                    return _sign_cosmos_const__WEBPACK_IMPORTED_MODULE_3__.stargateSigner.sign({\n                        msgs: sendMsgs\n                    }).broadcast();\n                case 2:\n                    resp = _context3.sent;\n                    setReceipt(resp);\n                case 4:\n                case \"end\":\n                    return _context3.stop();\n            }\n        }, _callee3);\n    })), []);\n    var _useDisclosure = (0,_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.useDisclosure)(), isOpen = _useDisclosure.isOpen, onOpen = _useDisclosure.onOpen, onClose = _useDisclosure.onClose;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Tabs, {\n        variant: \"enclosed\",\n        colorScheme: \"teal\",\n        marginY: 10,\n        marginX: 100,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.TabList, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Tab, {\n                        children: \"MsgSend\"\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Tab, {\n                        children: \"MsgStake\"\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Tab, {\n                        children: \"MsgVote\"\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Tab, {\n                        children: \"MsgIBC\"\n                    })\n                ]\n            }),\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.TabPanels, {\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.TabPanel, {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Stack, {\n                                direction: \"row\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Code, {\n                                        colorScheme: \"teal\",\n                                        children: _test_data__WEBPACK_IMPORTED_MODULE_6__.cosmoshubAddress\n                                    }),\n                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Code, {\n                                        colorScheme: \"yellow\",\n                                        children: \"\".concat((_balance$amount = balance === null || balance === void 0 ? void 0 : balance.amount) !== null && _balance$amount !== void 0 ? _balance$amount : \"--\", \" \").concat((_balance$denom = balance === null || balance === void 0 ? void 0 : balance.denom) !== null && _balance$denom !== void 0 ? _balance$denom : \"\")\n                                    })\n                                ]\n                            }),\n                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.UnorderedList, {\n                                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.ListItem, {\n                                    children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Stack, {\n                                        direction: \"row\",\n                                        marginTop: 5,\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Text, {\n                                                fontSize: \"l\",\n                                                children: \"Send 1 uatom to self\"\n                                            }),\n                                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Button, {\n                                                colorScheme: \"teal\",\n                                                variant: \"outline\",\n                                                size: \"xs\",\n                                                onClick: onClick,\n                                                children: \"Send\"\n                                            }),\n                                            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsxs)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.Modal, {\n                                                isOpen: isOpen,\n                                                onClose: onClose,\n                                                size: \"xl\",\n                                                children: [\n                                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.ModalOverlay, {}),\n                                                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_components__WEBPACK_IMPORTED_MODULE_7__.ModalTxView, {\n                                                        msgs: sendMsgs,\n                                                        gas: gas,\n                                                        fee: fee,\n                                                        gasPrice: gasPrice,\n                                                        onClick: onClickSignAndBroadcast\n                                                    })\n                                                ]\n                                            })\n                                        ]\n                                    })\n                                })\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.TabPanel, {\n                        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"p\", {\n                            children: \"MsgStake!\"\n                        })\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.TabPanel, {\n                        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"p\", {\n                            children: \"MsgVote!\"\n                        })\n                    }),\n                    /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.TabPanel, {\n                        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_8__.jsx)(\"p\", {\n                            children: \"MsgIBC!\"\n                        })\n                    })\n                ]\n            })\n        ]\n    });\n}\n_s(Page, \"5PQRKCABfzyDGDra7lcjgEpg1EI=\", false, function() {\n    return [\n        _chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.useDisclosure,\n        _chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.useDisclosure,\n        _chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.useDisclosure,\n        _chakra_ui_react__WEBPACK_IMPORTED_MODULE_9__.useDisclosure\n    ];\n});\n_c = Page;\nvar _c;\n$RefreshReg$(_c, \"Page\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/index.tsx\n"));

/***/ })

});